schema {
  query: Query
  mutation: Mutation
}

directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(model: String, models: [String!]) on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type App implements Node {
  actions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for AppActions returned from the connection."""
    orderBy: AppActionOrder
    """Filtering options for AppActions returned from the connection."""
    where: AppActionWhereInput
  ): AppActionConnection!
  """应用ID"""
  appKey: String
  """应用密钥"""
  appSecret: String
  """用于标识应用资源的唯一代码,尽量简短"""
  code: String!
  """备注"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  id: ID!
  """应用类型"""
  kind: AppKind!
  """图标,存储路规则：/{appcode}/{tid}/xxx"""
  logoFileID: Int
  menus(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for AppMenus returned from the connection."""
    orderBy: AppMenuOrder
    """Filtering options for AppMenus returned from the connection."""
    where: AppMenuWhereInput
  ): AppMenuConnection!
  """名称"""
  name: String!
  orgs(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Orgs returned from the connection."""
    orderBy: OrgOrder
    """Filtering options for Orgs returned from the connection."""
    where: OrgWhereInput
  ): OrgConnection!
  """策略"""
  policies: [AppPolicy!]
  """回调地址"""
  redirectURI: String
  """refresh_token有效期"""
  refreshTokenValidity: Int
  resources(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for AppResSlice returned from the connection."""
    orderBy: AppResOrder
    """Filtering options for AppResSlice returned from the connection."""
    where: AppResWhereInput
  ): AppResConnection!
  """角色"""
  roles: [AppRole!]
  """权限范围"""
  scopes: String
  """状态"""
  status: AppSimpleStatus
  """token有效期"""
  tokenValidity: Int
  updatedAt: Time
  updatedBy: Int
}

type AppAction implements Node {
  app: App
  """所属应用"""
  appID: ID
  """备注"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  id: ID!
  """restful,graphql,rpc,function"""
  kind: AppActionKind!
  """被引用的菜单项"""
  menus: [AppMenu!]
  """操作方法:读,写,列表"""
  method: AppActionMethod!
  """名称"""
  name: String!
  updatedAt: Time
  updatedBy: Int
}

"""A connection to a list of items."""
type AppActionConnection {
  """A list of edges."""
  edges: [AppActionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type AppActionEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: AppAction
}

"""AppActionKind is enum for the field kind"""
enum AppActionKind {
  function
  graphql
  restful
  route
  rpc
}

"""AppActionMethod is enum for the field method"""
enum AppActionMethod {
  list
  read
  write
}

"""Ordering options for AppAction connections"""
input AppActionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AppActions."""
  field: AppActionOrderField!
}

"""Properties by which AppAction connections can be ordered."""
enum AppActionOrderField {
  createdAt
}

"""
AppActionWhereInput is used for filtering AppAction objects.
Input was generated by ent.
"""
input AppActionWhereInput {
  and: [AppActionWhereInput!]
  """app_id field predicates"""
  appID: ID
  appIDIn: [ID!]
  appIDIsNil: Boolean
  appIDNEQ: ID
  appIDNotIn: [ID!]
  appIDNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """app edge predicates"""
  hasApp: Boolean
  hasAppWith: [AppWhereInput!]
  """menus edge predicates"""
  hasMenus: Boolean
  hasMenusWith: [AppMenuWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """kind field predicates"""
  kind: AppActionKind
  kindIn: [AppActionKind!]
  kindNEQ: AppActionKind
  kindNotIn: [AppActionKind!]
  """method field predicates"""
  method: AppActionMethod
  methodIn: [AppActionMethod!]
  methodNEQ: AppActionMethod
  methodNotIn: [AppActionMethod!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: AppActionWhereInput
  or: [AppActionWhereInput!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

"""A connection to a list of items."""
type AppConnection {
  """A list of edges."""
  edges: [AppEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type AppEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: App
}

"""AppKind is enum for the field kind"""
enum AppKind {
  native
  server
  web
}

type AppMenu implements Node {
  """需要权限控制时对应的权限"""
  action: AppAction
  """操作ID"""
  actionID: ID
  app: App
  """所属应用"""
  appID: ID
  """备注"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  displaySort: Int
  """菜单图标"""
  icon: String
  id: ID!
  """目录,菜单项"""
  kind: AppMenuKind!
  """菜单名称"""
  name: String!
  """父级ID"""
  parentID: Int!
  """菜单路由"""
  route: String
  updatedAt: Time
  updatedBy: Int
}

"""A connection to a list of items."""
type AppMenuConnection {
  """A list of edges."""
  edges: [AppMenuEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type AppMenuEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: AppMenu
}

"""AppMenuKind is enum for the field kind"""
enum AppMenuKind {
  dir
  menu
}

"""Ordering options for AppMenu connections"""
input AppMenuOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AppMenus."""
  field: AppMenuOrderField!
}

"""Properties by which AppMenu connections can be ordered."""
enum AppMenuOrderField {
  createdAt
  displaySort
}

"""
AppMenuWhereInput is used for filtering AppMenu objects.
Input was generated by ent.
"""
input AppMenuWhereInput {
  and: [AppMenuWhereInput!]
  """app_id field predicates"""
  appID: ID
  appIDIn: [ID!]
  appIDIsNil: Boolean
  appIDNEQ: ID
  appIDNotIn: [ID!]
  appIDNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """action edge predicates"""
  hasAction: Boolean
  hasActionWith: [AppActionWhereInput!]
  """app edge predicates"""
  hasApp: Boolean
  hasAppWith: [AppWhereInput!]
  """icon field predicates"""
  icon: String
  iconContains: String
  iconContainsFold: String
  iconEqualFold: String
  iconGT: String
  iconGTE: String
  iconHasPrefix: String
  iconHasSuffix: String
  iconIn: [String!]
  iconIsNil: Boolean
  iconLT: String
  iconLTE: String
  iconNEQ: String
  iconNotIn: [String!]
  iconNotNil: Boolean
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """kind field predicates"""
  kind: AppMenuKind
  kindIn: [AppMenuKind!]
  kindNEQ: AppMenuKind
  kindNotIn: [AppMenuKind!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: AppMenuWhereInput
  or: [AppMenuWhereInput!]
  """parent_id field predicates"""
  parentID: Int
  parentIDGT: Int
  parentIDGTE: Int
  parentIDIn: [Int!]
  parentIDLT: Int
  parentIDLTE: Int
  parentIDNEQ: Int
  parentIDNotIn: [Int!]
  """route field predicates"""
  route: String
  routeContains: String
  routeContainsFold: String
  routeEqualFold: String
  routeGT: String
  routeGTE: String
  routeHasPrefix: String
  routeHasSuffix: String
  routeIn: [String!]
  routeIsNil: Boolean
  routeLT: String
  routeLTE: String
  routeNEQ: String
  routeNotIn: [String!]
  routeNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

"""Ordering options for App connections"""
input AppOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Apps."""
  field: AppOrderField!
}

"""Properties by which App connections can be ordered."""
enum AppOrderField {
  createdAt
}

type AppPolicy implements Node {
  app: App
  """所属应用"""
  appID: ID
  """标识是否自动授予到账户"""
  autoGrant: Boolean!
  """描述"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  id: ID!
  """是否授权role"""
  isGrantAppRole(appRoleID: ID!): Boolean!
  """策略名称"""
  name: String!
  roles: [AppRole!]
  """策略规则"""
  rules: [PolicyRule]!
  """状态"""
  status: AppPolicySimpleStatus
  updatedAt: Time
  updatedBy: Int
}

"""A connection to a list of items."""
type AppPolicyConnection {
  """A list of edges."""
  edges: [AppPolicyEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type AppPolicyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: AppPolicy
}

"""Ordering options for AppPolicy connections"""
input AppPolicyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AppPolicies."""
  field: AppPolicyOrderField!
}

"""Properties by which AppPolicy connections can be ordered."""
enum AppPolicyOrderField {
  createdAt
}

"""AppPolicySimpleStatus is enum for the field status"""
enum AppPolicySimpleStatus {
  active
  inactive
  processing
}

"""
AppPolicyWhereInput is used for filtering AppPolicy objects.
Input was generated by ent.
"""
input AppPolicyWhereInput {
  and: [AppPolicyWhereInput!]
  """app_id field predicates"""
  appID: ID
  appIDIn: [ID!]
  appIDIsNil: Boolean
  appIDNEQ: ID
  appIDNotIn: [ID!]
  appIDNotNil: Boolean
  """auto_grant field predicates"""
  autoGrant: Boolean
  autoGrantNEQ: Boolean
  """comments field predicates"""
  comments: String
  commentsContains: String
  commentsContainsFold: String
  commentsEqualFold: String
  commentsGT: String
  commentsGTE: String
  commentsHasPrefix: String
  commentsHasSuffix: String
  commentsIn: [String!]
  commentsIsNil: Boolean
  commentsLT: String
  commentsLTE: String
  commentsNEQ: String
  commentsNotIn: [String!]
  commentsNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """app edge predicates"""
  hasApp: Boolean
  """app_role_policy edge predicates"""
  hasAppRolePolicy: Boolean
  hasAppRolePolicyWith: [AppRolePolicyWhereInput!]
  hasAppWith: [AppWhereInput!]
  """roles edge predicates"""
  hasRoles: Boolean
  hasRolesWith: [AppRoleWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: AppPolicyWhereInput
  or: [AppPolicyWhereInput!]
  """status field predicates"""
  status: AppPolicySimpleStatus
  statusIn: [AppPolicySimpleStatus!]
  statusIsNil: Boolean
  statusNEQ: AppPolicySimpleStatus
  statusNotIn: [AppPolicySimpleStatus!]
  statusNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

type AppRes implements Node {
  app: App
  """所属应用"""
  appID: ID
  """应用资源表达式"""
  arnPattern: String!
  createdAt: Time!
  createdBy: Int!
  id: ID!
  """资源名称"""
  name: String!
  """资源类型名称,如数据库表名"""
  typeName: String!
  updatedAt: Time
  updatedBy: Int
}

"""A connection to a list of items."""
type AppResConnection {
  """A list of edges."""
  edges: [AppResEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type AppResEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: AppRes
}

"""Ordering options for AppRes connections"""
input AppResOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AppResSlice."""
  field: AppResOrderField!
}

"""Properties by which AppRes connections can be ordered."""
enum AppResOrderField {
  createdAt
}

"""
AppResWhereInput is used for filtering AppRes objects.
Input was generated by ent.
"""
input AppResWhereInput {
  and: [AppResWhereInput!]
  """app_id field predicates"""
  appID: ID
  appIDIn: [ID!]
  appIDIsNil: Boolean
  appIDNEQ: ID
  appIDNotIn: [ID!]
  appIDNotNil: Boolean
  """arn_pattern field predicates"""
  arnPattern: String
  arnPatternContains: String
  arnPatternContainsFold: String
  arnPatternEqualFold: String
  arnPatternGT: String
  arnPatternGTE: String
  arnPatternHasPrefix: String
  arnPatternHasSuffix: String
  arnPatternIn: [String!]
  arnPatternLT: String
  arnPatternLTE: String
  arnPatternNEQ: String
  arnPatternNotIn: [String!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """app edge predicates"""
  hasApp: Boolean
  hasAppWith: [AppWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: AppResWhereInput
  or: [AppResWhereInput!]
  """type_name field predicates"""
  typeName: String
  typeNameContains: String
  typeNameContainsFold: String
  typeNameEqualFold: String
  typeNameGT: String
  typeNameGTE: String
  typeNameHasPrefix: String
  typeNameHasSuffix: String
  typeNameIn: [String!]
  typeNameLT: String
  typeNameLTE: String
  typeNameNEQ: String
  typeNameNotIn: [String!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

type AppRole implements Node {
  app: App
  """所属应用"""
  appID: ID
  """标识是否自动授予到账户"""
  autoGrant: Boolean!
  """备注"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  """授权后是否可编辑"""
  editable: Boolean!
  id: ID!
  """角色名称"""
  name: String!
  """权限授权策略"""
  policies: [AppPolicy!]
  updatedAt: Time
  updatedBy: Int
}

"""Ordering options for AppRole connections"""
input AppRoleOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AppRoles."""
  field: AppRoleOrderField!
}

"""Properties by which AppRole connections can be ordered."""
enum AppRoleOrderField {
  createdAt
}

"""Ordering options for AppRolePolicy connections"""
input AppRolePolicyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AppRolePolicies."""
  field: AppRolePolicyOrderField!
}

"""Properties by which AppRolePolicy connections can be ordered."""
enum AppRolePolicyOrderField {
  createdAt
}

"""
AppRolePolicyWhereInput is used for filtering AppRolePolicy objects.
Input was generated by ent.
"""
input AppRolePolicyWhereInput {
  and: [AppRolePolicyWhereInput!]
  """app_id field predicates"""
  appID: Int
  appIDGT: Int
  appIDGTE: Int
  appIDIn: [Int!]
  appIDLT: Int
  appIDLTE: Int
  appIDNEQ: Int
  appIDNotIn: [Int!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: AppRolePolicyWhereInput
  or: [AppRolePolicyWhereInput!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

"""
AppRoleWhereInput is used for filtering AppRole objects.
Input was generated by ent.
"""
input AppRoleWhereInput {
  and: [AppRoleWhereInput!]
  """app_id field predicates"""
  appID: ID
  appIDIn: [ID!]
  appIDIsNil: Boolean
  appIDNEQ: ID
  appIDNotIn: [ID!]
  appIDNotNil: Boolean
  """auto_grant field predicates"""
  autoGrant: Boolean
  autoGrantNEQ: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """editable field predicates"""
  editable: Boolean
  editableNEQ: Boolean
  """app edge predicates"""
  hasApp: Boolean
  """app_role_policy edge predicates"""
  hasAppRolePolicy: Boolean
  hasAppRolePolicyWith: [AppRolePolicyWhereInput!]
  hasAppWith: [AppWhereInput!]
  """policies edge predicates"""
  hasPolicies: Boolean
  hasPoliciesWith: [AppPolicyWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: AppRoleWhereInput
  or: [AppRoleWhereInput!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

"""AppSimpleStatus is enum for the field status"""
enum AppSimpleStatus {
  active
  inactive
  processing
}

"""
AppWhereInput is used for filtering App objects.
Input was generated by ent.
"""
input AppWhereInput {
  and: [AppWhereInput!]
  """app_key field predicates"""
  appKey: String
  appKeyContains: String
  appKeyContainsFold: String
  appKeyEqualFold: String
  appKeyGT: String
  appKeyGTE: String
  appKeyHasPrefix: String
  appKeyHasSuffix: String
  appKeyIn: [String!]
  appKeyIsNil: Boolean
  appKeyLT: String
  appKeyLTE: String
  appKeyNEQ: String
  appKeyNotIn: [String!]
  appKeyNotNil: Boolean
  """app_secret field predicates"""
  appSecret: String
  appSecretContains: String
  appSecretContainsFold: String
  appSecretEqualFold: String
  appSecretGT: String
  appSecretGTE: String
  appSecretHasPrefix: String
  appSecretHasSuffix: String
  appSecretIn: [String!]
  appSecretIsNil: Boolean
  appSecretLT: String
  appSecretLTE: String
  appSecretNEQ: String
  appSecretNotIn: [String!]
  appSecretNotNil: Boolean
  """code field predicates"""
  code: String
  codeContains: String
  codeContainsFold: String
  codeEqualFold: String
  codeGT: String
  codeGTE: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeIn: [String!]
  codeLT: String
  codeLTE: String
  codeNEQ: String
  codeNotIn: [String!]
  """comments field predicates"""
  comments: String
  commentsContains: String
  commentsContainsFold: String
  commentsEqualFold: String
  commentsGT: String
  commentsGTE: String
  commentsHasPrefix: String
  commentsHasSuffix: String
  commentsIn: [String!]
  commentsIsNil: Boolean
  commentsLT: String
  commentsLTE: String
  commentsNEQ: String
  commentsNotIn: [String!]
  commentsNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """actions edge predicates"""
  hasActions: Boolean
  hasActionsWith: [AppActionWhereInput!]
  """menus edge predicates"""
  hasMenus: Boolean
  hasMenusWith: [AppMenuWhereInput!]
  """orgs edge predicates"""
  hasOrgs: Boolean
  hasOrgsWith: [OrgWhereInput!]
  """policies edge predicates"""
  hasPolicies: Boolean
  hasPoliciesWith: [AppPolicyWhereInput!]
  """resources edge predicates"""
  hasResources: Boolean
  hasResourcesWith: [AppResWhereInput!]
  """roles edge predicates"""
  hasRoles: Boolean
  hasRolesWith: [AppRoleWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """kind field predicates"""
  kind: AppKind
  kindIn: [AppKind!]
  kindNEQ: AppKind
  kindNotIn: [AppKind!]
  """logo_file_id field predicates"""
  logoFileID: Int
  logoFileIDGT: Int
  logoFileIDGTE: Int
  logoFileIDIn: [Int!]
  logoFileIDIsNil: Boolean
  logoFileIDLT: Int
  logoFileIDLTE: Int
  logoFileIDNEQ: Int
  logoFileIDNotIn: [Int!]
  logoFileIDNotNil: Boolean
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: AppWhereInput
  or: [AppWhereInput!]
  """redirect_uri field predicates"""
  redirectURI: String
  redirectURIContains: String
  redirectURIContainsFold: String
  redirectURIEqualFold: String
  redirectURIGT: String
  redirectURIGTE: String
  redirectURIHasPrefix: String
  redirectURIHasSuffix: String
  redirectURIIn: [String!]
  redirectURIIsNil: Boolean
  redirectURILT: String
  redirectURILTE: String
  redirectURINEQ: String
  redirectURINotIn: [String!]
  redirectURINotNil: Boolean
  """refresh_token_validity field predicates"""
  refreshTokenValidity: Int
  refreshTokenValidityGT: Int
  refreshTokenValidityGTE: Int
  refreshTokenValidityIn: [Int!]
  refreshTokenValidityIsNil: Boolean
  refreshTokenValidityLT: Int
  refreshTokenValidityLTE: Int
  refreshTokenValidityNEQ: Int
  refreshTokenValidityNotIn: [Int!]
  refreshTokenValidityNotNil: Boolean
  """scopes field predicates"""
  scopes: String
  scopesContains: String
  scopesContainsFold: String
  scopesEqualFold: String
  scopesGT: String
  scopesGTE: String
  scopesHasPrefix: String
  scopesHasSuffix: String
  scopesIn: [String!]
  scopesIsNil: Boolean
  scopesLT: String
  scopesLTE: String
  scopesNEQ: String
  scopesNotIn: [String!]
  scopesNotNil: Boolean
  """status field predicates"""
  status: AppSimpleStatus
  statusIn: [AppSimpleStatus!]
  statusIsNil: Boolean
  statusNEQ: AppSimpleStatus
  statusNotIn: [AppSimpleStatus!]
  statusNotNil: Boolean
  """token_validity field predicates"""
  tokenValidity: Int
  tokenValidityGT: Int
  tokenValidityGTE: Int
  tokenValidityIn: [Int!]
  tokenValidityIsNil: Boolean
  tokenValidityLT: Int
  tokenValidityLTE: Int
  tokenValidityNEQ: Int
  tokenValidityNotIn: [Int!]
  tokenValidityNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

input AssignRoleUserInput {
  """生效结束时间"""
  endAt: Time
  """授权类型为角色或用户组的ID"""
  orgRoleID: ID!
  """生效开始时间"""
  startAt: Time
  userID: ID!
}

"""
CreateAppActionInput is used for create AppAction object.
Input was generated by ent.
"""
input CreateAppActionInput {
  appID: ID
  """备注"""
  comments: String
  """restful,graphql,rpc,function"""
  kind: AppActionKind!
  menuIDs: [ID!]
  """操作方法:读,写,列表"""
  method: AppActionMethod!
  """名称"""
  name: String!
}

"""
CreateAppInput is used for create App object.
Input was generated by ent.
"""
input CreateAppInput {
  actionIDs: [ID!]
  """应用ID"""
  appKey: String
  """应用密钥"""
  appSecret: String
  """用于标识应用资源的唯一代码,尽量简短"""
  code: String!
  """备注"""
  comments: String
  """应用类型"""
  kind: AppKind!
  """图标,存储路规则：/{appcode}/{tid}/xxx"""
  logoFileID: Int
  menuIDs: [ID!]
  """名称"""
  name: String!
  policyIDs: [ID!]
  """回调地址"""
  redirectURI: String
  """refresh_token有效期"""
  refreshTokenValidity: Int
  resourceIDs: [ID!]
  roleIDs: [ID!]
  """权限范围"""
  scopes: String
  """状态"""
  status: AppSimpleStatus
  """token有效期"""
  tokenValidity: Int
}

"""
CreateAppMenuInput is used for create AppMenu object.
Input was generated by ent.
"""
input CreateAppMenuInput {
  actionID: ID
  appID: ID
  """备注"""
  comments: String
  """菜单图标"""
  icon: String
  """目录,菜单项"""
  kind: AppMenuKind!
  """菜单名称"""
  name: String!
  """父级ID"""
  parentID: Int!
  """菜单路由"""
  route: String
}

"""
CreateAppPolicyInput is used for create AppPolicy object.
Input was generated by ent.
"""
input CreateAppPolicyInput {
  appID: ID
  """标识是否自动授予到账户"""
  autoGrant: Boolean
  """描述"""
  comments: String
  """策略名称"""
  name: String!
  roleIDs: [ID!]
  """策略规则"""
  rules: [PolicyRuleInput]!
  """状态"""
  status: AppPolicySimpleStatus
}

"""
CreateAppResInput is used for create AppRes object.
Input was generated by ent.
"""
input CreateAppResInput {
  appID: ID
  """应用资源表达式"""
  arnPattern: String!
  """资源名称"""
  name: String!
  """资源类型名称,如数据库表名"""
  typeName: String!
}

"""
CreateAppRoleInput is used for create AppRole object.
Input was generated by ent.
"""
input CreateAppRoleInput {
  appID: ID
  """标识是否自动授予到账户"""
  autoGrant: Boolean
  """备注"""
  comments: String
  """授权后是否可编辑"""
  editable: Boolean
  """角色名称"""
  name: String!
}

"""
CreateFileSourceInput is used for create FileSource object.
Input was generated by ent.
"""
input CreateFileSourceInput {
  """文件存储空间。本地存储为：local"""
  bucket: String
  """备注"""
  comments: String
  """对外服务的访问域名"""
  endpoint: String
  fileIDs: [ID!]
  """文件来源"""
  kind: FileSourceKind!
  """地域，数据存储的物理位置。本地存储为：localhost"""
  region: String
}

"""
CreateOauthClientInput is used for create OauthClient object.
Input was generated by ent.
"""
input CreateOauthClientInput {
  """授权类型"""
  grantTypes: OauthClientGrantTypes!
  """名称"""
  name: String!
  userID: ID!
}

"""
CreateOrgInput is used for create Org object.
Input was generated by ent.
"""
input CreateOrgInput {
  appIDs: [ID!]
  childIDs: [ID!]
  """国家或地区2字码"""
  countryCode: String
  """默认域名"""
  domain: String
  """组织名称"""
  name: String!
  ownerID: ID
  parentID: ID!
  permissionIDs: [ID!]
  policyIDs: [ID!]
  """简介"""
  profile: String
  rolesAndGroupIDs: [ID!]
  """状态"""
  status: OrgSimpleStatus
  """时区"""
  timezone: String
  userIDs: [ID!]
}

"""
CreateOrgPolicyInput is used for create OrgPolicy object.
Input was generated by ent.
"""
input CreateOrgPolicyInput {
  """所属应用策略,如果是自定义应用策略,则为空"""
  appPolicyID: Int
  """描述"""
  comments: String
  """策略名称"""
  name: String!
  orgID: ID
  permissionIDs: [ID!]
  """策略规则"""
  rules: [PolicyRuleInput]!
}

"""
CreateOrgRoleInput is used for create OrgRole object.
Input was generated by ent.
"""
input CreateOrgRoleInput {
  """备注"""
  comments: String
  """类型,group:组,role:角色"""
  kind: OrgRoleKind!
  """名称"""
  name: String!
  orgID: ID
}

"""
CreateOrgUserInput is used for create OrgUser object.
Input was generated by ent.
"""
input CreateOrgUserInput {
  """在组织内的显示名称"""
  displayName: String!
  """加入时间"""
  joinedAt: Time
  orgID: ID!
  userID: ID!
}

"""
CreatePermissionInput is used for create Permission object.
Input was generated by ent.
"""
input CreatePermissionInput {
  """生效结束时间"""
  endAt: Time
  orgID: ID!
  orgPolicyID: ID!
  """授权类型:角色,用户"""
  principalKind: PermissionPrincipalKind!
  roleID: ID
  """生效开始时间"""
  startAt: Time
  userID: ID
}

"""
CreateUserIdentityInput is used for create UserIdentity object.
Input was generated by ent.
"""
input CreateUserIdentityInput {
  """用户名、邮箱、手机、unionid、qq"""
  code: String
  """扩展标识码,比如微信的openID"""
  codeExtend: String
  """身份标识类型 手机、邮箱、用户名、微信、qq"""
  kind: UserIdentityKind!
  """状态,部分登陆方式需要验证通过才可启用"""
  status: UserIdentitySimpleStatus
  userID: ID
}

"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  """头像,存储路规则：/{appcode}/{tid}/xxx"""
  avatarFileID: ID
  """备注"""
  comments: String
  deviceIDs: [ID!]
  """显示名"""
  displayName: String!
  """邮箱"""
  email: String
  identityIDs: [ID!]
  loginProfile: CreateUserLoginProfileInput
  loginProfileID: ID
  """手机"""
  mobile: String
  oauthClientIDs: [ID!]
  """如指定密码则填入,否则由系统自动生成密码"""
  password: CreateUserPasswordInput
  passwordIDs: [ID!]
  """登陆名称"""
  principalName: String!
  """状态"""
  status: UserSimpleStatus
}

"""
CreateUserLoginProfileInput is used for create UserLoginProfile object.
Input was generated by ent.
"""
input CreateUserLoginProfileInput {
  """是否允许使用密码登陆控制台"""
  canLogin: Boolean
  """下次登陆时需要重置密码"""
  passwordReset: Boolean
  """设置密码:keep-保持不变,customer-客户自行设置,auto-自动生成"""
  setKind: UserLoginProfileSetKind!
  userID: ID
  """是否开启设备认证"""
  verifyDevice: Boolean!
}

"""
CreateUserPasswordInput is used for create UserPassword object.
Input was generated by ent.
"""
input CreateUserPasswordInput {
  """密码"""
  password: String
  """场景: login 普通登陆"""
  scene: UserPasswordScene!
  """生效状态,默认生效"""
  status: UserPasswordSimpleStatus
  userID: ID
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

input EnableDirectoryInput {
  """域名"""
  domain: String!
  name: String!
}

type File implements Node {
  createdAt: Time!
  createdBy: Int!
  id: ID!
  """md5值"""
  md5: String
  """媒体类型，如：image/png"""
  mineType: String
  """文件名称"""
  name: String!
  """文件相对路径"""
  path: String!
  """文件大小，单位为B"""
  size: Int
  """文件来源"""
  source: FileSource!
  """文件来源"""
  sourceID: ID!
  """租户ID"""
  tenantID: Int!
  updatedAt: Time
  updatedBy: Int
}

"""A connection to a list of items."""
type FileConnection {
  """A list of edges."""
  edges: [FileEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type FileEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: File
}

"""Ordering options for File connections"""
input FileOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Files."""
  field: FileOrderField!
}

"""Properties by which File connections can be ordered."""
enum FileOrderField {
  createdAt
}

type FileSource implements Node {
  """文件存储空间。本地存储为：local"""
  bucket: String
  """备注"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  """对外服务的访问域名"""
  endpoint: String
  files(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Files returned from the connection."""
    orderBy: FileOrder
    """Filtering options for Files returned from the connection."""
    where: FileWhereInput
  ): FileConnection!
  id: ID!
  """文件来源"""
  kind: FileSourceKind!
  """地域，数据存储的物理位置。本地存储为：localhost"""
  region: String
  updatedAt: Time
  updatedBy: Int
}

"""A connection to a list of items."""
type FileSourceConnection {
  """A list of edges."""
  edges: [FileSourceEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type FileSourceEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: FileSource
}

"""FileSourceKind is enum for the field kind"""
enum FileSourceKind {
  alioss
  local
}

"""Ordering options for FileSource connections"""
input FileSourceOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order FileSources."""
  field: FileSourceOrderField!
}

"""Properties by which FileSource connections can be ordered."""
enum FileSourceOrderField {
  createdAt
}

"""
FileSourceWhereInput is used for filtering FileSource objects.
Input was generated by ent.
"""
input FileSourceWhereInput {
  and: [FileSourceWhereInput!]
  """bucket field predicates"""
  bucket: String
  bucketContains: String
  bucketContainsFold: String
  bucketEqualFold: String
  bucketGT: String
  bucketGTE: String
  bucketHasPrefix: String
  bucketHasSuffix: String
  bucketIn: [String!]
  bucketIsNil: Boolean
  bucketLT: String
  bucketLTE: String
  bucketNEQ: String
  bucketNotIn: [String!]
  bucketNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """endpoint field predicates"""
  endpoint: String
  endpointContains: String
  endpointContainsFold: String
  endpointEqualFold: String
  endpointGT: String
  endpointGTE: String
  endpointHasPrefix: String
  endpointHasSuffix: String
  endpointIn: [String!]
  endpointIsNil: Boolean
  endpointLT: String
  endpointLTE: String
  endpointNEQ: String
  endpointNotIn: [String!]
  endpointNotNil: Boolean
  """files edge predicates"""
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """kind field predicates"""
  kind: FileSourceKind
  kindIn: [FileSourceKind!]
  kindNEQ: FileSourceKind
  kindNotIn: [FileSourceKind!]
  not: FileSourceWhereInput
  or: [FileSourceWhereInput!]
  """region field predicates"""
  region: String
  regionContains: String
  regionContainsFold: String
  regionEqualFold: String
  regionGT: String
  regionGTE: String
  regionHasPrefix: String
  regionHasSuffix: String
  regionIn: [String!]
  regionIsNil: Boolean
  regionLT: String
  regionLTE: String
  regionNEQ: String
  regionNotIn: [String!]
  regionNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
  and: [FileWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """source edge predicates"""
  hasSource: Boolean
  hasSourceWith: [FileSourceWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: FileWhereInput
  or: [FileWhereInput!]
  """path field predicates"""
  path: String
  pathContains: String
  pathContainsFold: String
  pathEqualFold: String
  pathGT: String
  pathGTE: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathIn: [String!]
  pathLT: String
  pathLTE: String
  pathNEQ: String
  pathNotIn: [String!]
  """size field predicates"""
  size: Int
  sizeGT: Int
  sizeGTE: Int
  sizeIn: [Int!]
  sizeIsNil: Boolean
  sizeLT: Int
  sizeLTE: Int
  sizeNEQ: Int
  sizeNotIn: [Int!]
  sizeNotNil: Boolean
  """source_id field predicates"""
  sourceID: ID
  sourceIDIn: [ID!]
  sourceIDNEQ: ID
  sourceIDNotIn: [ID!]
  """tenant_id field predicates"""
  tenantID: Int
  tenantIDGT: Int
  tenantIDGTE: Int
  tenantIDIn: [Int!]
  tenantIDLT: Int
  tenantIDLTE: Int
  tenantIDNEQ: Int
  tenantIDNotIn: [Int!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

"""An object with an Global ID,for using in Noder interface."""
scalar GID

input GrantInput {
  orgScope: ID!
  policyID: ID!
  principal: GID!
}

type Mfa {
  account: String!
  secret: String!
}

type Mutation {
  """将用户分配到组织下"""
  allotOrganizationUser(input: CreateOrgUserInput!): Boolean!
  """角色添加策略"""
  assignAppRolePolicy(appID: ID!, policyIDs: [ID!], roleID: ID!): Boolean!
  """分配应用,将自动分配应用下的所有资源"""
  assignOrganizationApp(appID: ID!, orgID: ID!): Boolean!
  """分配应用策略到组织"""
  assignOrganizationAppPolicy(appPolicyID: ID!, orgID: ID!): Boolean!
  """分配应用角色到组织"""
  assignOrganizationAppRole(appRoleID: ID!, orgID: ID!): Boolean!
  """分配组用户"""
  assignRoleUser(input: AssignRoleUserInput!): Boolean!
  """绑定用户凭证(管理端使用)"""
  bindUserIdentity(input: CreateUserIdentityInput!): UserIdentity
  """用户修改自己的登录密码"""
  changePassword(newPwd: String!, oldPwd: String!): Boolean!
  """创建应用"""
  createApp(input: CreateAppInput!): App
  """创建应用操作"""
  createAppActions(appID: ID!, input: [CreateAppActionInput!]): [AppAction]!
  """创建应用菜单"""
  createAppMenus(appID: ID!, input: [CreateAppMenuInput!]): [AppMenu]!
  """创建应用策略模板"""
  createAppPolicy(appID: ID!, input: CreateAppPolicyInput!): AppPolicy
  """创建应用角色"""
  createAppRole(appID: ID!, input: CreateAppRoleInput!): AppRole
  """创建文件来源"""
  createFileSource(input: CreateFileSourceInput!): FileSource!
  """创建用户 AccessKey"""
  createOauthClient(input: CreateOauthClientInput!): OauthClient!
  """创建组织目录"""
  createOrganization(input: CreateOrgInput!): Org
  """创建组织成员(管理账户)"""
  createOrganizationAccount(
    input: CreateUserInput!
    """根组织ID"""
    rootOrgID: ID!
  ): User
  """创建组织策略"""
  createOrganizationPolicy(input: CreateOrgPolicyInput!): OrgPolicy
  """创建组织用户"""
  createOrganizationUser(
    input: CreateUserInput!
    """根组织ID"""
    rootOrgID: ID!
  ): User
  """创建角色或组"""
  createRole(input: CreateOrgRoleInput!): OrgRole
  """创建组织根节点(管理端使用)"""
  createRoot(input: CreateOrgInput!): Org
  """删除应用"""
  deleteApp(appID: ID!): Boolean!
  """删除应用操作"""
  deleteAppAction(actionID: ID!): Boolean!
  """删除应用菜单"""
  deleteAppMenu(menuID: ID!): Boolean!
  """删除应用策略模板"""
  deleteAppPolicy(policyID: ID!): Boolean!
  """删除应用角色"""
  deleteAppRole(roleID: ID!): Boolean!
  """删除文件来源"""
  deleteFileSource(fsID: ID!): Boolean!
  """删除OauthClient"""
  deleteOauthClient(id: ID!): Boolean!
  """删除组织目录"""
  deleteOrganization(orgID: ID!): Boolean!
  """删除组织策略"""
  deleteOrganizationPolicy(orgPolicyID: ID!): Boolean!
  """删除角色或组"""
  deleteRole(roleID: ID!): Boolean!
  """删除用户"""
  deleteUser(userID: ID!): Boolean!
  """删除用户凭证"""
  deleteUserIdentity(id: ID!): Boolean!
  """禁用MFA"""
  disableMFA(userID: ID!): Boolean!
  """禁用OauthClient"""
  disableOauthClient(id: ID!): OauthClient!
  """启用目录管理,返回根节点组织信息"""
  enableDirectory(input: EnableDirectoryInput!): Org
  """启用MFA"""
  enableMFA(userID: ID!): Mfa!
  """启用OauthClient"""
  enableOauthClient(id: ID!): OauthClient!
  """授权"""
  grant(input: CreatePermissionInput!): Permission
  """应用菜单位置调整，targetLocation: child, up, down"""
  moveAppMenu(action: TreeAction!, sourceID: ID!, targetID: ID!): Boolean!
  """组织位置调整，action: child, up, down"""
  moveOrganization(
    action: TreeAction!
    """要移动的节点组织ID"""
    sourceID: ID!
    """目标节点组织ID"""
    targetId: ID!
  ): Boolean!
  """恢复用户"""
  recoverOrgUser(pwdInput: CreateUserPasswordInput, pwdKind: UserLoginProfileSetKind!, userID: ID!, userInput: UpdateUserInput!): User!
  """从组织目录中移除用户"""
  removeOrganizationUser(
    """目标组织ID,可为根组织ID"""
    orgID: ID!
    """用户ID"""
    userID: ID!
  ): Boolean!
  """重置用户密码并发送邮件"""
  resetUserPasswordByEmail(userId: ID!): Boolean!
  """取消授权"""
  revoke(
    orgID: ID!
    """组织内的授权ID"""
    permissionID: ID!
  ): Boolean!
  """角色移除策略"""
  revokeAppRolePolicy(appID: ID!, policyIDs: [ID!], roleID: ID!): Boolean!
  """取消分配应用"""
  revokeOrganizationApp(appID: ID!, orgID: ID!): Boolean!
  """取消分配到组织应用策略"""
  revokeOrganizationAppPolicy(appPolicyID: ID!, orgID: ID!): Boolean!
  """取消分配到组织应用角色"""
  revokeOrganizationAppRole(appRoleID: ID!, orgID: ID!): Boolean!
  """取消分配组用户"""
  revokeRoleUser(roleID: ID!, userID: ID!): Boolean!
  """发送MFA至用户邮箱"""
  sendMFAToUserByEmail(userID: ID!): Boolean!
  """更新应用"""
  updateApp(appID: ID!, input: UpdateAppInput!): App
  """更新应用操作"""
  updateAppAction(actionID: ID!, input: UpdateAppActionInput!): AppAction
  """更新应用菜单"""
  updateAppMenu(input: UpdateAppMenuInput!, menuID: ID!): AppMenu
  """更新应用策略模板"""
  updateAppPolicy(input: UpdateAppPolicyInput!, policyID: ID!): AppPolicy
  """修改资源名称"""
  updateAppRes(appResID: ID!, input: UpdateAppResInput!): AppRes
  """更新应用角色"""
  updateAppRole(input: UpdateAppRoleInput!, roleID: ID!): AppRole
  """更新文件来源"""
  updateFileSource(fsID: ID!, input: UpdateFileSourceInput!): FileSource!
  """用户登陆配置"""
  updateLoginProfile(input: UpdateUserLoginProfileInput!, userID: ID!): UserLoginProfile
  """更新组织目录"""
  updateOrganization(input: UpdateOrgInput!, orgID: ID!): Org
  """更新组织策略"""
  updateOrganizationPolicy(input: UpdateOrgPolicyInput!, orgPolicyID: ID!): OrgPolicy
  """更新授权"""
  updatePermission(input: UpdatePermissionInput!, permissionID: ID!): Permission
  """更新角色或组"""
  updateRole(input: UpdateOrgRoleInput!, roleID: ID!): OrgRole
  """更新用户"""
  updateUser(input: UpdateUserInput!, userID: ID!): User
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}

type OauthClient implements Node {
  """id"""
  clientID: String!
  """密钥"""
  clientSecret: String!
  createdAt: Time!
  createdBy: Int!
  """授权类型"""
  grantTypes: OauthClientGrantTypes!
  id: ID!
  """最后认证时间"""
  lastAuthAt: Time
  """名称"""
  name: String!
  """状态"""
  status: OauthClientSimpleStatus!
  updatedAt: Time
  updatedBy: Int
  user: User!
  """关联用户id"""
  userID: ID!
}

"""OauthClientGrantTypes is enum for the field grant_types"""
enum OauthClientGrantTypes {
  client_credentials
}

"""Ordering options for OauthClient connections"""
input OauthClientOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order OauthClients."""
  field: OauthClientOrderField!
}

"""Properties by which OauthClient connections can be ordered."""
enum OauthClientOrderField {
  createdAt
}

"""OauthClientSimpleStatus is enum for the field status"""
enum OauthClientSimpleStatus {
  active
  inactive
  processing
}

"""
OauthClientWhereInput is used for filtering OauthClient objects.
Input was generated by ent.
"""
input OauthClientWhereInput {
  and: [OauthClientWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """grant_types field predicates"""
  grantTypes: OauthClientGrantTypes
  grantTypesIn: [OauthClientGrantTypes!]
  grantTypesNEQ: OauthClientGrantTypes
  grantTypesNotIn: [OauthClientGrantTypes!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: OauthClientWhereInput
  or: [OauthClientWhereInput!]
  """status field predicates"""
  status: OauthClientSimpleStatus
  statusIn: [OauthClientSimpleStatus!]
  statusNEQ: OauthClientSimpleStatus
  statusNotIn: [OauthClientSimpleStatus!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
  """user_id field predicates"""
  userID: ID
  userIDIn: [ID!]
  userIDNEQ: ID
  userIDNotIn: [ID!]
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

type Org implements Node {
  apps(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Apps returned from the connection."""
    orderBy: AppOrder
    """Filtering options for Apps returned from the connection."""
    where: AppWhereInput
  ): AppConnection!
  children: [Org!]
  """系统代码"""
  code: String
  """国家或地区2字码"""
  countryCode: String
  createdAt: Time!
  createdBy: Int!
  deletedAt: Time
  displaySort: Int
  """默认域名"""
  domain: String
  id: ID!
  """是否允许解除应用策略"""
  isAllowRevokeAppPolicy(appPolicyID: ID!): Boolean!
  """分类: 根节点,组织节点"""
  kind: OrgKind!
  """组织名称"""
  name: String!
  """管理账户"""
  owner: User
  """管理账户ID,如果设置则该组织将升级为根组织"""
  ownerID: ID
  parent: Org!
  """父级ID,0为根组织."""
  parentID: ID!
  """路径编码"""
  path: String
  permissions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Permissions returned from the connection."""
    orderBy: PermissionOrder
    """Filtering options for Permissions returned from the connection."""
    where: PermissionWhereInput
  ): PermissionConnection!
  policies(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for OrgPolicies returned from the connection."""
    orderBy: OrgPolicyOrder
    """Filtering options for OrgPolicies returned from the connection."""
    where: OrgPolicyWhereInput
  ): OrgPolicyConnection!
  """简介"""
  profile: String
  """状态"""
  status: OrgSimpleStatus
  """时区"""
  timezone: String
  updatedAt: Time
  updatedBy: Int
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder
    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}

"""A connection to a list of items."""
type OrgConnection {
  """A list of edges."""
  edges: [OrgEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type OrgEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Org
}

"""OrgKind is enum for the field kind"""
enum OrgKind {
  org
  root
}

"""Ordering options for Org connections"""
input OrgOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Orgs."""
  field: OrgOrderField!
}

"""Properties by which Org connections can be ordered."""
enum OrgOrderField {
  createdAt
  displaySort
}

type OrgPolicy implements Node {
  """所属应用策略,如果是自定义应用策略,则为空"""
  appPolicyID: Int
  """描述"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  id: ID!
  """是否授权role"""
  isGrantRole(roleID: ID!): Boolean!
  """是否授权user"""
  isGrantUser(userID: ID!): Boolean!
  """策略名称"""
  name: String!
  org: Org
  """组织ID"""
  orgID: ID
  permissions: [Permission!]
  """策略规则"""
  rules: [PolicyRule]!
  updatedAt: Time
  updatedBy: Int
}

"""A connection to a list of items."""
type OrgPolicyConnection {
  """A list of edges."""
  edges: [OrgPolicyEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type OrgPolicyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: OrgPolicy
}

"""Ordering options for OrgPolicy connections"""
input OrgPolicyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order OrgPolicies."""
  field: OrgPolicyOrderField!
}

"""Properties by which OrgPolicy connections can be ordered."""
enum OrgPolicyOrderField {
  createdAt
}

"""
OrgPolicyWhereInput is used for filtering OrgPolicy objects.
Input was generated by ent.
"""
input OrgPolicyWhereInput {
  and: [OrgPolicyWhereInput!]
  """app_policy_id field predicates"""
  appPolicyID: Int
  appPolicyIDGT: Int
  appPolicyIDGTE: Int
  appPolicyIDIn: [Int!]
  appPolicyIDIsNil: Boolean
  appPolicyIDLT: Int
  appPolicyIDLTE: Int
  appPolicyIDNEQ: Int
  appPolicyIDNotIn: [Int!]
  appPolicyIDNotNil: Boolean
  """comments field predicates"""
  comments: String
  commentsContains: String
  commentsContainsFold: String
  commentsEqualFold: String
  commentsGT: String
  commentsGTE: String
  commentsHasPrefix: String
  commentsHasSuffix: String
  commentsIn: [String!]
  commentsIsNil: Boolean
  commentsLT: String
  commentsLTE: String
  commentsNEQ: String
  commentsNotIn: [String!]
  commentsNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """org edge predicates"""
  hasOrg: Boolean
  hasOrgWith: [OrgWhereInput!]
  """permissions edge predicates"""
  hasPermissions: Boolean
  hasPermissionsWith: [PermissionWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: OrgPolicyWhereInput
  or: [OrgPolicyWhereInput!]
  """org_id field predicates"""
  orgID: ID
  orgIDIn: [ID!]
  orgIDIsNil: Boolean
  orgIDNEQ: ID
  orgIDNotIn: [ID!]
  orgIDNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

type OrgRole implements Node {
  """备注"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  id: ID!
  """是否系统角色"""
  isAppRole: Boolean!
  """是否分配给user"""
  isGrantUser(userID: ID!): Boolean!
  """类型,group:组,role:角色"""
  kind: OrgRoleKind!
  """名称"""
  name: String!
  """组织ID"""
  orgID: ID
  updatedAt: Time
  updatedBy: Int
}

"""A connection to a list of items."""
type OrgRoleConnection {
  """A list of edges."""
  edges: [OrgRoleEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type OrgRoleEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: OrgRole
}

"""OrgRoleKind is enum for the field kind"""
enum OrgRoleKind {
  group
  role
}

"""Ordering options for OrgRole connections"""
input OrgRoleOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order OrgRoles."""
  field: OrgRoleOrderField!
}

"""Properties by which OrgRole connections can be ordered."""
enum OrgRoleOrderField {
  createdAt
}

"""Ordering options for OrgRoleUser connections"""
input OrgRoleUserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order OrgRoleUsers."""
  field: OrgRoleUserOrderField!
}

"""Properties by which OrgRoleUser connections can be ordered."""
enum OrgRoleUserOrderField {
  createdAt
}

"""
OrgRoleUserWhereInput is used for filtering OrgRoleUser objects.
Input was generated by ent.
"""
input OrgRoleUserWhereInput {
  and: [OrgRoleUserWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: OrgRoleUserWhereInput
  or: [OrgRoleUserWhereInput!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

"""
OrgRoleWhereInput is used for filtering OrgRole objects.
Input was generated by ent.
"""
input OrgRoleWhereInput {
  and: [OrgRoleWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """org edge predicates"""
  hasOrg: Boolean
  hasOrgWith: [OrgWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """kind field predicates"""
  kind: OrgRoleKind
  kindIn: [OrgRoleKind!]
  kindNEQ: OrgRoleKind
  kindNotIn: [OrgRoleKind!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: OrgRoleWhereInput
  or: [OrgRoleWhereInput!]
  """org_id field predicates"""
  orgID: ID
  orgIDIn: [ID!]
  orgIDIsNil: Boolean
  orgIDNEQ: ID
  orgIDNotIn: [ID!]
  orgIDNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

"""OrgSimpleStatus is enum for the field status"""
enum OrgSimpleStatus {
  active
  inactive
  processing
}

"""Ordering options for OrgUser connections"""
input OrgUserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order OrgUsers."""
  field: OrgUserOrderField!
}

"""Properties by which OrgUser connections can be ordered."""
enum OrgUserOrderField {
  createdAt
}

"""
OrgUserWhereInput is used for filtering OrgUser objects.
Input was generated by ent.
"""
input OrgUserWhereInput {
  and: [OrgUserWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """display_name field predicates"""
  displayName: String
  displayNameContains: String
  displayNameContainsFold: String
  displayNameEqualFold: String
  displayNameGT: String
  displayNameGTE: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIn: [String!]
  displayNameLT: String
  displayNameLTE: String
  displayNameNEQ: String
  displayNameNotIn: [String!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """joined_at field predicates"""
  joinedAt: Time
  joinedAtGT: Time
  joinedAtGTE: Time
  joinedAtIn: [Time!]
  joinedAtLT: Time
  joinedAtLTE: Time
  joinedAtNEQ: Time
  joinedAtNotIn: [Time!]
  not: OrgUserWhereInput
  or: [OrgUserWhereInput!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

"""
OrgWhereInput is used for filtering Org objects.
Input was generated by ent.
"""
input OrgWhereInput {
  and: [OrgWhereInput!]
  """code field predicates"""
  code: String
  codeContains: String
  codeContainsFold: String
  codeEqualFold: String
  codeGT: String
  codeGTE: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeIn: [String!]
  codeIsNil: Boolean
  codeLT: String
  codeLTE: String
  codeNEQ: String
  codeNotIn: [String!]
  codeNotNil: Boolean
  """country_code field predicates"""
  countryCode: String
  countryCodeContains: String
  countryCodeContainsFold: String
  countryCodeEqualFold: String
  countryCodeGT: String
  countryCodeGTE: String
  countryCodeHasPrefix: String
  countryCodeHasSuffix: String
  countryCodeIn: [String!]
  countryCodeIsNil: Boolean
  countryCodeLT: String
  countryCodeLTE: String
  countryCodeNEQ: String
  countryCodeNotIn: [String!]
  countryCodeNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """domain field predicates"""
  domain: String
  domainContains: String
  domainContainsFold: String
  domainEqualFold: String
  domainGT: String
  domainGTE: String
  domainHasPrefix: String
  domainHasSuffix: String
  domainIn: [String!]
  domainIsNil: Boolean
  domainLT: String
  domainLTE: String
  domainNEQ: String
  domainNotIn: [String!]
  domainNotNil: Boolean
  """apps edge predicates"""
  hasApps: Boolean
  hasAppsWith: [AppWhereInput!]
  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [OrgWhereInput!]
  """org_user edge predicates"""
  hasOrgUser: Boolean
  hasOrgUserWith: [OrgUserWhereInput!]
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [OrgWhereInput!]
  """permissions edge predicates"""
  hasPermissions: Boolean
  hasPermissionsWith: [PermissionWhereInput!]
  """policies edge predicates"""
  hasPolicies: Boolean
  hasPoliciesWith: [OrgPolicyWhereInput!]
  """roles_and_groups edge predicates"""
  hasRolesAndGroups: Boolean
  hasRolesAndGroupsWith: [OrgRoleWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """kind field predicates"""
  kind: OrgKind
  kindIn: [OrgKind!]
  kindNEQ: OrgKind
  kindNotIn: [OrgKind!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: OrgWhereInput
  or: [OrgWhereInput!]
  """owner_id field predicates"""
  ownerID: ID
  ownerIDIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDNEQ: ID
  ownerIDNotIn: [ID!]
  ownerIDNotNil: Boolean
  """parent_id field predicates"""
  parentID: ID
  parentIDIn: [ID!]
  parentIDNEQ: ID
  parentIDNotIn: [ID!]
  """path field predicates"""
  path: String
  pathContains: String
  pathContainsFold: String
  pathEqualFold: String
  pathGT: String
  pathGTE: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathIn: [String!]
  pathIsNil: Boolean
  pathLT: String
  pathLTE: String
  pathNEQ: String
  pathNotIn: [String!]
  pathNotNil: Boolean
  """status field predicates"""
  status: OrgSimpleStatus
  statusIn: [OrgSimpleStatus!]
  statusIsNil: Boolean
  statusNEQ: OrgSimpleStatus
  statusNotIn: [OrgSimpleStatus!]
  statusNotNil: Boolean
  """timezone field predicates"""
  timezone: String
  timezoneContains: String
  timezoneContainsFold: String
  timezoneEqualFold: String
  timezoneGT: String
  timezoneGTE: String
  timezoneHasPrefix: String
  timezoneHasSuffix: String
  timezoneIn: [String!]
  timezoneIsNil: Boolean
  timezoneLT: String
  timezoneLTE: String
  timezoneNEQ: String
  timezoneNotIn: [String!]
  timezoneNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Permission implements Node {
  createdAt: Time!
  createdBy: Int!
  """生效结束时间"""
  endAt: Time
  id: ID!
  """是否允许撤销：根用户授权及系统角色授权不允许撤销"""
  isAllowRevoke: Boolean!
  org: Org!
  """授权的域根组织"""
  orgID: ID!
  orgPolicy: OrgPolicy!
  """策略"""
  orgPolicyID: ID!
  """授权类型:角色,用户"""
  principalKind: PermissionPrincipalKind!
  role: OrgRole
  """授权类型为角色或用户组的ID"""
  roleID: ID
  """生效开始时间"""
  startAt: Time
  """状态"""
  status: PermissionSimpleStatus
  updatedAt: Time
  updatedBy: Int
  user: User
  """授权类型为用户的ID"""
  userID: ID
}

"""A connection to a list of items."""
type PermissionConnection {
  """A list of edges."""
  edges: [PermissionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PermissionEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Permission
}

"""Ordering options for Permission connections"""
input PermissionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Permissions."""
  field: PermissionOrderField!
}

"""Properties by which Permission connections can be ordered."""
enum PermissionOrderField {
  createdAt
}

"""PermissionPrincipalKind is enum for the field principal_kind"""
enum PermissionPrincipalKind {
  role
  user
}

"""PermissionSimpleStatus is enum for the field status"""
enum PermissionSimpleStatus {
  active
  inactive
  processing
}

"""
PermissionWhereInput is used for filtering Permission objects.
Input was generated by ent.
"""
input PermissionWhereInput {
  and: [PermissionWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """end_at field predicates"""
  endAt: Time
  endAtGT: Time
  endAtGTE: Time
  endAtIn: [Time!]
  endAtIsNil: Boolean
  endAtLT: Time
  endAtLTE: Time
  endAtNEQ: Time
  endAtNotIn: [Time!]
  endAtNotNil: Boolean
  """org edge predicates"""
  hasOrg: Boolean
  """org_policy edge predicates"""
  hasOrgPolicy: Boolean
  hasOrgPolicyWith: [OrgPolicyWhereInput!]
  hasOrgWith: [OrgWhereInput!]
  """role edge predicates"""
  hasRole: Boolean
  hasRoleWith: [OrgRoleWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: PermissionWhereInput
  or: [PermissionWhereInput!]
  """org_id field predicates"""
  orgID: ID
  orgIDIn: [ID!]
  orgIDNEQ: ID
  orgIDNotIn: [ID!]
  """org_policy_id field predicates"""
  orgPolicyID: ID
  orgPolicyIDIn: [ID!]
  orgPolicyIDNEQ: ID
  orgPolicyIDNotIn: [ID!]
  """principal_kind field predicates"""
  principalKind: PermissionPrincipalKind
  principalKindIn: [PermissionPrincipalKind!]
  principalKindNEQ: PermissionPrincipalKind
  principalKindNotIn: [PermissionPrincipalKind!]
  """role_id field predicates"""
  roleID: ID
  roleIDIn: [ID!]
  roleIDIsNil: Boolean
  roleIDNEQ: ID
  roleIDNotIn: [ID!]
  roleIDNotNil: Boolean
  """start_at field predicates"""
  startAt: Time
  startAtGT: Time
  startAtGTE: Time
  startAtIn: [Time!]
  startAtIsNil: Boolean
  startAtLT: Time
  startAtLTE: Time
  startAtNEQ: Time
  startAtNotIn: [Time!]
  startAtNotNil: Boolean
  """status field predicates"""
  status: PermissionSimpleStatus
  statusIn: [PermissionSimpleStatus!]
  statusIsNil: Boolean
  statusNEQ: PermissionSimpleStatus
  statusNotIn: [PermissionSimpleStatus!]
  statusNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
  """user_id field predicates"""
  userID: ID
  userIDIn: [ID!]
  userIDIsNil: Boolean
  userIDNEQ: ID
  userIDNotIn: [ID!]
  userIDNotNil: Boolean
}

enum PolicyEffect {
  allow
  deny
}

type PolicyRule {
  actions: [String!]
  conditions: [String!]
  effect: PolicyEffect!
  resources: [String!]
}

input PolicyRuleInput {
  actions: [String!]
  conditions: [String!]
  effect: PolicyEffect!
  resources: [String!]
}

type Query {
  """应用策略授权的组织列表"""
  appPolicyAssignedToOrgs(policyID: ID!, where: OrgWhereInput): [Org!]!
  """获取应用资源模板"""
  appResources(after: Cursor, appID: ID!, before: Cursor, first: Int, last: Int, orderBy: AppResOrder, where: AppResWhereInput): AppResConnection!
  """应用角色授权的组织列表"""
  appRoleAssignedToOrgs(roleID: ID!, where: OrgWhereInput): [Org!]!
  """公开应用查询"""
  apps(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Apps returned from the connection."""
    orderBy: AppOrder
    """Filtering options for Apps returned from the connection."""
    where: AppWhereInput
  ): AppConnection!
  """检测权限"""
  checkPermission(
    """appCode + ":" + action"""
    permission: String!
  ): Boolean!
  """文件来源"""
  fileSources(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: FileSourceOrder, where: FileSourceWhereInput): FileSourceConnection!
  """获取全局ID,开发用途"""
  globalID(id: ID!, type: String!): GID
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: GID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [GID!]!
  ): [Node]!
  """组织策略可授权的appActions"""
  orgAppActions(appCode: String!): [AppAction!]!
  """获取组织应用资源模板"""
  orgAppResources(after: Cursor, appID: ID!, before: Cursor, first: Int, last: Int, orderBy: AppResOrder, where: AppResWhereInput): AppResConnection!
  """用户组"""
  orgGroups(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: OrgRoleOrder, where: OrgRoleWhereInput): OrgRoleConnection!
  """权限策略引用列表"""
  orgPolicyReferences(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: PermissionOrder, policyID: ID!, where: PermissionWhereInput): PermissionConnection!
  """组织回收站列表"""
  orgRecycleUsers(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: UserOrder, where: UserWhereInput): UserConnection!
  """用户组组成员"""
  orgRoleUsers(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: UserOrder, roleID: ID!, where: UserWhereInput): UserConnection!
  """角色"""
  orgRoles(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: OrgRoleOrder, where: OrgRoleWhereInput): OrgRoleConnection!
  organizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Orgs returned from the connection."""
    orderBy: OrgOrder
    """Filtering options for Orgs returned from the connection."""
    where: OrgWhereInput
  ): OrgConnection!
  """用户继承用户组的权限策略"""
  userExtendGroupPolicies(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: PermissionOrder, userID: ID!, where: PermissionWhereInput): PermissionConnection!
  """用户加入的用户组"""
  userGroups(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: OrgRoleOrder, userID: ID!, where: OrgRoleWhereInput): OrgRoleConnection!
  """用户菜单"""
  userMenus(appCode: String!): [AppMenu!]!
  """获取用户所有权限"""
  userPermissions(where: AppActionWhereInput): [AppAction!]!
  """用户加入的root组织"""
  userRootOrgs: [Org!]!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder
    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}

"""The builtin Time type"""
scalar Time

"""树操作类型"""
enum TreeAction {
  """作为子节点"""
  child
  """下移"""
  down
  """上移"""
  up
}

"""
UpdateAppActionInput is used for update AppAction object.
Input was generated by ent.
"""
input UpdateAppActionInput {
  addMenuIDs: [ID!]
  clearComments: Boolean
  clearMenus: Boolean
  """备注"""
  comments: String
  """restful,graphql,rpc,function"""
  kind: AppActionKind
  """操作方法:读,写,列表"""
  method: AppActionMethod
  """名称"""
  name: String
  removeMenuIDs: [ID!]
}

"""
UpdateAppInput is used for update App object.
Input was generated by ent.
"""
input UpdateAppInput {
  addActionIDs: [ID!]
  addMenuIDs: [ID!]
  addPolicyIDs: [ID!]
  addResourceIDs: [ID!]
  addRoleIDs: [ID!]
  """应用ID"""
  appKey: String
  """应用密钥"""
  appSecret: String
  clearActions: Boolean
  clearAppKey: Boolean
  clearAppSecret: Boolean
  clearComments: Boolean
  clearLogoFileID: Boolean
  clearMenus: Boolean
  clearPolicies: Boolean
  clearRedirectURI: Boolean
  clearRefreshTokenValidity: Boolean
  clearResources: Boolean
  clearRoles: Boolean
  clearScopes: Boolean
  clearStatus: Boolean
  clearTokenValidity: Boolean
  """备注"""
  comments: String
  """应用类型"""
  kind: AppKind
  """图标,存储路规则：/{appcode}/{tid}/xxx"""
  logoFileID: Int
  """名称"""
  name: String
  """回调地址"""
  redirectURI: String
  """refresh_token有效期"""
  refreshTokenValidity: Int
  removeActionIDs: [ID!]
  removeMenuIDs: [ID!]
  removePolicyIDs: [ID!]
  removeResourceIDs: [ID!]
  removeRoleIDs: [ID!]
  """权限范围"""
  scopes: String
  """状态"""
  status: AppSimpleStatus
  """token有效期"""
  tokenValidity: Int
}

"""
UpdateAppMenuInput is used for update AppMenu object.
Input was generated by ent.
"""
input UpdateAppMenuInput {
  actionID: ID
  clearAction: Boolean
  clearComments: Boolean
  clearIcon: Boolean
  clearRoute: Boolean
  """备注"""
  comments: String
  """菜单图标"""
  icon: String
  """目录,菜单项"""
  kind: AppMenuKind
  """菜单名称"""
  name: String
  """父级ID"""
  parentID: Int
  """菜单路由"""
  route: String
}

"""
UpdateAppPolicyInput is used for update AppPolicy object.
Input was generated by ent.
"""
input UpdateAppPolicyInput {
  addRoleIDs: [ID!]
  appendRules: [PolicyRuleInput]
  """标识是否自动授予到账户"""
  autoGrant: Boolean
  clearComments: Boolean
  clearRoles: Boolean
  clearStatus: Boolean
  """描述"""
  comments: String
  """策略名称"""
  name: String
  removeRoleIDs: [ID!]
  """策略规则"""
  rules: [PolicyRuleInput]
  """状态"""
  status: AppPolicySimpleStatus
}

"""
UpdateAppResInput is used for update AppRes object.
Input was generated by ent.
"""
input UpdateAppResInput {
  """资源名称"""
  name: String
}

"""
UpdateAppRoleInput is used for update AppRole object.
Input was generated by ent.
"""
input UpdateAppRoleInput {
  """标识是否自动授予到账户"""
  autoGrant: Boolean
  clearComments: Boolean
  """备注"""
  comments: String
  """授权后是否可编辑"""
  editable: Boolean
  """角色名称"""
  name: String
}

"""
UpdateFileSourceInput is used for update FileSource object.
Input was generated by ent.
"""
input UpdateFileSourceInput {
  addFileIDs: [ID!]
  """文件存储空间。本地存储为：local"""
  bucket: String
  clearBucket: Boolean
  clearComments: Boolean
  clearEndpoint: Boolean
  clearFiles: Boolean
  clearRegion: Boolean
  """备注"""
  comments: String
  """对外服务的访问域名"""
  endpoint: String
  """文件来源"""
  kind: FileSourceKind
  """地域，数据存储的物理位置。本地存储为：localhost"""
  region: String
  removeFileIDs: [ID!]
}

"""
UpdateOauthClientInput is used for update OauthClient object.
Input was generated by ent.
"""
input UpdateOauthClientInput {
  """授权类型"""
  grantTypes: OauthClientGrantTypes
  """名称"""
  name: String
  userID: ID
}

"""
UpdateOrgInput is used for update Org object.
Input was generated by ent.
"""
input UpdateOrgInput {
  addAppIDs: [ID!]
  addChildIDs: [ID!]
  addPermissionIDs: [ID!]
  addPolicyIDs: [ID!]
  addRolesAndGroupIDs: [ID!]
  addUserIDs: [ID!]
  clearApps: Boolean
  clearChildren: Boolean
  clearCountryCode: Boolean
  clearDomain: Boolean
  clearOwner: Boolean
  clearPermissions: Boolean
  clearPolicies: Boolean
  clearProfile: Boolean
  clearRolesAndGroups: Boolean
  clearStatus: Boolean
  clearTimezone: Boolean
  clearUsers: Boolean
  """国家或地区2字码"""
  countryCode: String
  """默认域名"""
  domain: String
  """组织名称"""
  name: String
  ownerID: ID
  parentID: ID
  """简介"""
  profile: String
  removeAppIDs: [ID!]
  removeChildIDs: [ID!]
  removePermissionIDs: [ID!]
  removePolicyIDs: [ID!]
  removeRolesAndGroupIDs: [ID!]
  removeUserIDs: [ID!]
  """状态"""
  status: OrgSimpleStatus
  """时区"""
  timezone: String
}

"""
UpdateOrgPolicyInput is used for update OrgPolicy object.
Input was generated by ent.
"""
input UpdateOrgPolicyInput {
  addPermissionIDs: [ID!]
  """所属应用策略,如果是自定义应用策略,则为空"""
  appPolicyID: Int
  appendRules: [PolicyRuleInput]
  clearAppPolicyID: Boolean
  clearComments: Boolean
  clearPermissions: Boolean
  """描述"""
  comments: String
  """策略名称"""
  name: String
  removePermissionIDs: [ID!]
  """策略规则"""
  rules: [PolicyRuleInput]
}

"""
UpdateOrgRoleInput is used for update OrgRole object.
Input was generated by ent.
"""
input UpdateOrgRoleInput {
  clearComments: Boolean
  """备注"""
  comments: String
  """类型,group:组,role:角色"""
  kind: OrgRoleKind
  """名称"""
  name: String
}

"""
UpdateOrgUserInput is used for update OrgUser object.
Input was generated by ent.
"""
input UpdateOrgUserInput {
  """在组织内的显示名称"""
  displayName: String
  """加入时间"""
  joinedAt: Time
  orgID: ID
  userID: ID
}

"""
UpdatePermissionInput is used for update Permission object.
Input was generated by ent.
"""
input UpdatePermissionInput {
  clearEndAt: Boolean
  clearStartAt: Boolean
  clearStatus: Boolean
  """生效结束时间"""
  endAt: Time
  """生效开始时间"""
  startAt: Time
  """状态"""
  status: PermissionSimpleStatus
}

"""
UpdateUserIdentityInput is used for update UserIdentity object.
Input was generated by ent.
"""
input UpdateUserIdentityInput {
  clearCode: Boolean
  clearCodeExtend: Boolean
  clearStatus: Boolean
  """用户名、邮箱、手机、unionid、qq"""
  code: String
  """扩展标识码,比如微信的openID"""
  codeExtend: String
  """身份标识类型 手机、邮箱、用户名、微信、qq"""
  kind: UserIdentityKind
  """状态,部分登陆方式需要验证通过才可启用"""
  status: UserIdentitySimpleStatus
}

"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  """头像,存储路规则：/{appcode}/{tid}/xxx"""
  avatarFileID: ID
  clearAvatarFileID: Boolean
  clearComments: Boolean
  clearEmail: Boolean
  clearMobile: Boolean
  """备注"""
  comments: String
  """显示名"""
  displayName: String
  """邮箱"""
  email: String
  """手机"""
  mobile: String
  """登陆名称"""
  principalName: String
}

"""
UpdateUserLoginProfileInput is used for update UserLoginProfile object.
Input was generated by ent.
"""
input UpdateUserLoginProfileInput {
  """是否允许使用密码登陆控制台"""
  canLogin: Boolean
  clearCanLogin: Boolean
  clearPasswordReset: Boolean
  """下次登陆时需要重置密码"""
  passwordReset: Boolean
  """设置密码:keep-保持不变,customer-客户自行设置,auto-自动生成"""
  setKind: UserLoginProfileSetKind
  """是否开启设备认证"""
  verifyDevice: Boolean
}

"""
UpdateUserPasswordInput is used for update UserPassword object.
Input was generated by ent.
"""
input UpdateUserPasswordInput {
  clearPassword: Boolean
  clearStatus: Boolean
  """密码"""
  password: String
  """场景: login 普通登陆"""
  scene: UserPasswordScene
  """生效状态,默认生效"""
  status: UserPasswordSimpleStatus
}

type User implements Node {
  """头像,存储路规则：/{appcode}/{tid}/xxx"""
  avatarFileID: ID
  """备注"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  """创建类型,邀请，注册,手工创建"""
  creationType: UserCreationType!
  deletedAt: Time
  """用户设备"""
  devices: [UserDevice!]
  """显示名"""
  displayName: String!
  """邮箱"""
  email: String
  id: ID!
  """用户身份标识"""
  identities: [UserIdentity!]
  """是否允许解除角色授权"""
  isAllowRevokeRole(orgRoleID: ID!): Boolean!
  """是否分配role"""
  isAssignOrgRole(orgRoleID: ID!): Boolean!
  """登陆设置"""
  loginProfile: UserLoginProfile
  """手机"""
  mobile: String
  """用户AccessKey"""
  oauthClients: [OauthClient!]
  permissions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Permissions returned from the connection."""
    orderBy: PermissionOrder
    """Filtering options for Permissions returned from the connection."""
    where: PermissionWhereInput
  ): PermissionConnection!
  """登陆名称"""
  principalName: String!
  """注册时IP"""
  registerIP: String!
  """状态"""
  status: UserSimpleStatus
  updatedAt: Time
  updatedBy: Int
  """用户类型"""
  userType: UserUserType!
}

"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""UserCreationType is enum for the field creation_type"""
enum UserCreationType {
  invitation
  manual
  register
}

type UserDevice implements Node {
  appVersion: String
  """备注"""
  comments: String
  createdAt: Time!
  createdBy: Int!
  deviceModel: String
  deviceName: String
  """设备唯一ID"""
  deviceUID: String!
  id: ID!
  """状态,可用或不可用及其他待确认状态"""
  status: UserDeviceSimpleStatus
  systemName: String
  systemVersion: String
  updatedAt: Time
  updatedBy: Int
  user: User
  userID: ID
}

"""Ordering options for UserDevice connections"""
input UserDeviceOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserDevices."""
  field: UserDeviceOrderField!
}

"""Properties by which UserDevice connections can be ordered."""
enum UserDeviceOrderField {
  createdAt
}

"""UserDeviceSimpleStatus is enum for the field status"""
enum UserDeviceSimpleStatus {
  active
  inactive
  processing
}

"""
UserDeviceWhereInput is used for filtering UserDevice objects.
Input was generated by ent.
"""
input UserDeviceWhereInput {
  and: [UserDeviceWhereInput!]
  """app_version field predicates"""
  appVersion: String
  appVersionContains: String
  appVersionContainsFold: String
  appVersionEqualFold: String
  appVersionGT: String
  appVersionGTE: String
  appVersionHasPrefix: String
  appVersionHasSuffix: String
  appVersionIn: [String!]
  appVersionIsNil: Boolean
  appVersionLT: String
  appVersionLTE: String
  appVersionNEQ: String
  appVersionNotIn: [String!]
  appVersionNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """device_model field predicates"""
  deviceModel: String
  deviceModelContains: String
  deviceModelContainsFold: String
  deviceModelEqualFold: String
  deviceModelGT: String
  deviceModelGTE: String
  deviceModelHasPrefix: String
  deviceModelHasSuffix: String
  deviceModelIn: [String!]
  deviceModelIsNil: Boolean
  deviceModelLT: String
  deviceModelLTE: String
  deviceModelNEQ: String
  deviceModelNotIn: [String!]
  deviceModelNotNil: Boolean
  """device_name field predicates"""
  deviceName: String
  deviceNameContains: String
  deviceNameContainsFold: String
  deviceNameEqualFold: String
  deviceNameGT: String
  deviceNameGTE: String
  deviceNameHasPrefix: String
  deviceNameHasSuffix: String
  deviceNameIn: [String!]
  deviceNameIsNil: Boolean
  deviceNameLT: String
  deviceNameLTE: String
  deviceNameNEQ: String
  deviceNameNotIn: [String!]
  deviceNameNotNil: Boolean
  """device_uid field predicates"""
  deviceUID: String
  deviceUIDContains: String
  deviceUIDContainsFold: String
  deviceUIDEqualFold: String
  deviceUIDGT: String
  deviceUIDGTE: String
  deviceUIDHasPrefix: String
  deviceUIDHasSuffix: String
  deviceUIDIn: [String!]
  deviceUIDLT: String
  deviceUIDLTE: String
  deviceUIDNEQ: String
  deviceUIDNotIn: [String!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: UserDeviceWhereInput
  or: [UserDeviceWhereInput!]
  """status field predicates"""
  status: UserDeviceSimpleStatus
  statusIn: [UserDeviceSimpleStatus!]
  statusIsNil: Boolean
  statusNEQ: UserDeviceSimpleStatus
  statusNotIn: [UserDeviceSimpleStatus!]
  statusNotNil: Boolean
  """system_name field predicates"""
  systemName: String
  systemNameContains: String
  systemNameContainsFold: String
  systemNameEqualFold: String
  systemNameGT: String
  systemNameGTE: String
  systemNameHasPrefix: String
  systemNameHasSuffix: String
  systemNameIn: [String!]
  systemNameIsNil: Boolean
  systemNameLT: String
  systemNameLTE: String
  systemNameNEQ: String
  systemNameNotIn: [String!]
  systemNameNotNil: Boolean
  """system_version field predicates"""
  systemVersion: String
  systemVersionContains: String
  systemVersionContainsFold: String
  systemVersionEqualFold: String
  systemVersionGT: String
  systemVersionGTE: String
  systemVersionHasPrefix: String
  systemVersionHasSuffix: String
  systemVersionIn: [String!]
  systemVersionIsNil: Boolean
  systemVersionLT: String
  systemVersionLTE: String
  systemVersionNEQ: String
  systemVersionNotIn: [String!]
  systemVersionNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
  """user_id field predicates"""
  userID: ID
  userIDIn: [ID!]
  userIDIsNil: Boolean
  userIDNEQ: ID
  userIDNotIn: [ID!]
  userIDNotNil: Boolean
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: User
}

type UserIdentity implements Node {
  """用户名、邮箱、手机、unionid、qq"""
  code: String
  """扩展标识码,比如微信的openID"""
  codeExtend: String
  createdAt: Time!
  createdBy: Int!
  id: ID!
  """身份标识类型 手机、邮箱、用户名、微信、qq"""
  kind: UserIdentityKind!
  """状态,部分登陆方式需要验证通过才可启用"""
  status: UserIdentitySimpleStatus
  updatedAt: Time
  updatedBy: Int
  user: User
  userID: ID
}

"""UserIdentityKind is enum for the field kind"""
enum UserIdentityKind {
  email
  name
  phone
  qq
  wechat
}

"""Ordering options for UserIdentity connections"""
input UserIdentityOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserIdentities."""
  field: UserIdentityOrderField!
}

"""Properties by which UserIdentity connections can be ordered."""
enum UserIdentityOrderField {
  createdAt
}

"""UserIdentitySimpleStatus is enum for the field status"""
enum UserIdentitySimpleStatus {
  active
  inactive
  processing
}

"""
UserIdentityWhereInput is used for filtering UserIdentity objects.
Input was generated by ent.
"""
input UserIdentityWhereInput {
  and: [UserIdentityWhereInput!]
  """code field predicates"""
  code: String
  codeContains: String
  codeContainsFold: String
  codeEqualFold: String
  """code_extend field predicates"""
  codeExtend: String
  codeExtendContains: String
  codeExtendContainsFold: String
  codeExtendEqualFold: String
  codeExtendGT: String
  codeExtendGTE: String
  codeExtendHasPrefix: String
  codeExtendHasSuffix: String
  codeExtendIn: [String!]
  codeExtendIsNil: Boolean
  codeExtendLT: String
  codeExtendLTE: String
  codeExtendNEQ: String
  codeExtendNotIn: [String!]
  codeExtendNotNil: Boolean
  codeGT: String
  codeGTE: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeIn: [String!]
  codeIsNil: Boolean
  codeLT: String
  codeLTE: String
  codeNEQ: String
  codeNotIn: [String!]
  codeNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """kind field predicates"""
  kind: UserIdentityKind
  kindIn: [UserIdentityKind!]
  kindNEQ: UserIdentityKind
  kindNotIn: [UserIdentityKind!]
  not: UserIdentityWhereInput
  or: [UserIdentityWhereInput!]
  """status field predicates"""
  status: UserIdentitySimpleStatus
  statusIn: [UserIdentitySimpleStatus!]
  statusIsNil: Boolean
  statusNEQ: UserIdentitySimpleStatus
  statusNotIn: [UserIdentitySimpleStatus!]
  statusNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
  """user_id field predicates"""
  userID: ID
  userIDIn: [ID!]
  userIDIsNil: Boolean
  userIDNEQ: ID
  userIDNotIn: [ID!]
  userIDNotNil: Boolean
}

type UserLoginProfile implements Node {
  """是否允许使用密码登陆控制台"""
  canLogin: Boolean
  createdAt: Time!
  createdBy: Int!
  id: ID!
  """最后登陆时间"""
  lastLoginAt: Time
  lastLoginIP: String
  """是否开启多因素验证"""
  mfaEnabled: Boolean
  """多因素验证状态"""
  mfaStatus: UserLoginProfileSimpleStatus
  """下次登陆时需要重置密码"""
  passwordReset: Boolean
  """设置密码:keep-保持不变,customer-客户自行设置,auto-自动生成"""
  setKind: UserLoginProfileSetKind!
  updatedAt: Time
  updatedBy: Int
  user: User
  userID: ID
  """是否开启设备认证"""
  verifyDevice: Boolean!
}

"""Ordering options for UserLoginProfile connections"""
input UserLoginProfileOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserLoginProfiles."""
  field: UserLoginProfileOrderField!
}

"""Properties by which UserLoginProfile connections can be ordered."""
enum UserLoginProfileOrderField {
  createdAt
}

"""UserLoginProfileSetKind is enum for the field set_kind"""
enum UserLoginProfileSetKind {
  auto
  customer
  keep
}

"""UserLoginProfileSimpleStatus is enum for the field mfa_status"""
enum UserLoginProfileSimpleStatus {
  active
  inactive
  processing
}

"""
UserLoginProfileWhereInput is used for filtering UserLoginProfile objects.
Input was generated by ent.
"""
input UserLoginProfileWhereInput {
  and: [UserLoginProfileWhereInput!]
  """can_login field predicates"""
  canLogin: Boolean
  canLoginIsNil: Boolean
  canLoginNEQ: Boolean
  canLoginNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """mfa_enabled field predicates"""
  mfaEnabled: Boolean
  mfaEnabledIsNil: Boolean
  mfaEnabledNEQ: Boolean
  mfaEnabledNotNil: Boolean
  """mfa_status field predicates"""
  mfaStatus: UserLoginProfileSimpleStatus
  mfaStatusIn: [UserLoginProfileSimpleStatus!]
  mfaStatusIsNil: Boolean
  mfaStatusNEQ: UserLoginProfileSimpleStatus
  mfaStatusNotIn: [UserLoginProfileSimpleStatus!]
  mfaStatusNotNil: Boolean
  not: UserLoginProfileWhereInput
  or: [UserLoginProfileWhereInput!]
  """password_reset field predicates"""
  passwordReset: Boolean
  passwordResetIsNil: Boolean
  passwordResetNEQ: Boolean
  passwordResetNotNil: Boolean
  """set_kind field predicates"""
  setKind: UserLoginProfileSetKind
  setKindIn: [UserLoginProfileSetKind!]
  setKindNEQ: UserLoginProfileSetKind
  setKindNotIn: [UserLoginProfileSetKind!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
  """user_id field predicates"""
  userID: ID
  userIDIn: [ID!]
  userIDIsNil: Boolean
  userIDNEQ: ID
  userIDNotIn: [ID!]
  userIDNotNil: Boolean
  """verify_device field predicates"""
  verifyDevice: Boolean
  verifyDeviceNEQ: Boolean
}

"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}

"""Properties by which User connections can be ordered."""
enum UserOrderField {
  createdAt
}

type UserPassword implements Node {
  createdAt: Time!
  createdBy: Int!
  id: ID!
  """场景: login 普通登陆"""
  scene: UserPasswordScene!
  """生效状态,默认生效"""
  status: UserPasswordSimpleStatus
  updatedAt: Time
  updatedBy: Int
  user: User
  userID: ID
}

"""Ordering options for UserPassword connections"""
input UserPasswordOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserPasswords."""
  field: UserPasswordOrderField!
}

"""Properties by which UserPassword connections can be ordered."""
enum UserPasswordOrderField {
  createdAt
}

"""UserPasswordScene is enum for the field scene"""
enum UserPasswordScene {
  login
}

"""UserPasswordSimpleStatus is enum for the field status"""
enum UserPasswordSimpleStatus {
  active
  inactive
  processing
}

"""
UserPasswordWhereInput is used for filtering UserPassword objects.
Input was generated by ent.
"""
input UserPasswordWhereInput {
  and: [UserPasswordWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: UserPasswordWhereInput
  or: [UserPasswordWhereInput!]
  """scene field predicates"""
  scene: UserPasswordScene
  sceneIn: [UserPasswordScene!]
  sceneNEQ: UserPasswordScene
  sceneNotIn: [UserPasswordScene!]
  """status field predicates"""
  status: UserPasswordSimpleStatus
  statusIn: [UserPasswordSimpleStatus!]
  statusIsNil: Boolean
  statusNEQ: UserPasswordSimpleStatus
  statusNotIn: [UserPasswordSimpleStatus!]
  statusNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
  """user_id field predicates"""
  userID: ID
  userIDIn: [ID!]
  userIDIsNil: Boolean
  userIDNEQ: ID
  userIDNotIn: [ID!]
  userIDNotNil: Boolean
}

"""UserSimpleStatus is enum for the field status"""
enum UserSimpleStatus {
  active
  inactive
  processing
}

"""UserUserType is enum for the field user_type"""
enum UserUserType {
  account
  member
}

"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  and: [UserWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """created_by field predicates"""
  createdBy: Int
  createdByGT: Int
  createdByGTE: Int
  createdByIn: [Int!]
  createdByLT: Int
  createdByLTE: Int
  createdByNEQ: Int
  createdByNotIn: [Int!]
  """creation_type field predicates"""
  creationType: UserCreationType
  creationTypeIn: [UserCreationType!]
  creationTypeNEQ: UserCreationType
  creationTypeNotIn: [UserCreationType!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """display_name field predicates"""
  displayName: String
  displayNameContains: String
  displayNameContainsFold: String
  displayNameEqualFold: String
  displayNameGT: String
  displayNameGTE: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIn: [String!]
  displayNameLT: String
  displayNameLTE: String
  displayNameNEQ: String
  displayNameNotIn: [String!]
  """email field predicates"""
  email: String
  emailContains: String
  emailContainsFold: String
  emailEqualFold: String
  emailGT: String
  emailGTE: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIn: [String!]
  emailIsNil: Boolean
  emailLT: String
  emailLTE: String
  emailNEQ: String
  emailNotIn: [String!]
  emailNotNil: Boolean
  """devices edge predicates"""
  hasDevices: Boolean
  hasDevicesWith: [UserDeviceWhereInput!]
  """identities edge predicates"""
  hasIdentities: Boolean
  hasIdentitiesWith: [UserIdentityWhereInput!]
  """login_profile edge predicates"""
  hasLoginProfile: Boolean
  hasLoginProfileWith: [UserLoginProfileWhereInput!]
  """oauth_clients edge predicates"""
  hasOauthClients: Boolean
  hasOauthClientsWith: [OauthClientWhereInput!]
  """passwords edge predicates"""
  hasPasswords: Boolean
  hasPasswordsWith: [UserPasswordWhereInput!]
  """permissions edge predicates"""
  hasPermissions: Boolean
  hasPermissionsWith: [PermissionWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """mobile field predicates"""
  mobile: String
  mobileContains: String
  mobileContainsFold: String
  mobileEqualFold: String
  mobileGT: String
  mobileGTE: String
  mobileHasPrefix: String
  mobileHasSuffix: String
  mobileIn: [String!]
  mobileIsNil: Boolean
  mobileLT: String
  mobileLTE: String
  mobileNEQ: String
  mobileNotIn: [String!]
  mobileNotNil: Boolean
  not: UserWhereInput
  or: [UserWhereInput!]
  """principal_name field predicates"""
  principalName: String
  principalNameContains: String
  principalNameContainsFold: String
  principalNameEqualFold: String
  principalNameGT: String
  principalNameGTE: String
  principalNameHasPrefix: String
  principalNameHasSuffix: String
  principalNameIn: [String!]
  principalNameLT: String
  principalNameLTE: String
  principalNameNEQ: String
  principalNameNotIn: [String!]
  """register_ip field predicates"""
  registerIP: String
  registerIPContains: String
  registerIPContainsFold: String
  registerIPEqualFold: String
  registerIPGT: String
  registerIPGTE: String
  registerIPHasPrefix: String
  registerIPHasSuffix: String
  registerIPIn: [String!]
  registerIPLT: String
  registerIPLTE: String
  registerIPNEQ: String
  registerIPNotIn: [String!]
  """status field predicates"""
  status: UserSimpleStatus
  statusIn: [UserSimpleStatus!]
  statusIsNil: Boolean
  statusNEQ: UserSimpleStatus
  statusNotIn: [UserSimpleStatus!]
  statusNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: Int
  updatedByGT: Int
  updatedByGTE: Int
  updatedByIn: [Int!]
  updatedByIsNil: Boolean
  updatedByLT: Int
  updatedByLTE: Int
  updatedByNEQ: Int
  updatedByNotIn: [Int!]
  updatedByNotNil: Boolean
  """user_type field predicates"""
  userType: UserUserType
  userTypeIn: [UserUserType!]
  userTypeNEQ: UserUserType
  userTypeNotIn: [UserUserType!]
}